@*
    DirSFTP
    Copyright (C) 2023  Raphael Beck

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@page "/browse"

@inject IFileSaver FileSaver
@inject IConfigStorage ConfigStorage
@inject IUploadLockService UploadLock
@inject NavigationManager NavigationManager

<PageTitle>
    DirSFTP - @currentDirectory
</PageTitle>

@using Renci.SshNet
@using Renci.SshNet.Sftp
@using CommunityToolkit.Maui.Core;
@using CommunityToolkit.Maui.Alerts;
@using CommunityToolkit.Maui.Storage;
@using System.Collections.Concurrent;
@using GlitchedPolygons.DirSFTP.Models
@using GlitchedPolygons.DirSFTP.Services
@using GlitchedPolygons.DirSFTP.Services.Lock
@using GlitchedPolygons.DirSFTP.Services.SFTP
@using GlitchedPolygons.DirSFTP.Services.Config
@using GlitchedPolygons.DirSFTP.ExtensionMethods
@using GlitchedPolygons.ExtensionMethods

<h1>
    SFTP Browser
</h1>

<br />

@if (currentSftpConfig is not null)
{
    <p>
        @currentSftpConfig.Username@@@currentSftpConfig.Host:@currentSftpConfig.Port
        <span class="oi oi-account-logout desktop-only"
              title="Disconnect"
              style="margin-left: 8px; cursor: pointer; font-size: 1.10rem;"
              @onclick="OnClickDisconnect">
        </span>
    </p>

    <button class="btn btn-danger mobile-only stretch-when-narrow"
            style="margin-top: -4px; margin-bottom: 12px;"
            @onclick="OnClickDisconnect"
            type="button">
        <span class="oi oi-account-logout"></span>
        &nbsp;Disconnect
    </button>

    <p>
        Current directory:
    </p>

    <div class="input-group"
         style="max-width: 666px; margin-top: -4px;">

        <input type="text"
               class="form-control"
               @bind="currentDirectory">

        <button class="btn btn-primary"
                type="button"
                id="go-btn"
            disabled="@UploadLock.IsLocked"
                @onclick="() => OpenDirectory(currentDirectory)">
            Go
        </button>

    </div>

    <br />
}

@if (files == null)
{
    <br />

    <p>
        Loading...
    </p>

    <div class="progress"
         style="max-width: 420px">
        <div class="progress-bar progress-bar-striped progress-bar-animated"
             role="progressbar"
             aria-valuenow="100"
             aria-valuemin="0"
             aria-valuemax="100"
             style="width: 100%;">
        </div>
    </div>
}
else
{
    <div class="mobile-only">

        <div class="accordion" id="accordion">

            @foreach (SftpFile file in files)
            {
                if (file.Name == "." || (file.Name == ".." && currentDirectory.Count(c => c is '/' or '\\') <= 1))
                {
                    continue;
                }

                bool isDotDotDir = file.IsDirectory && file.Name == "..";

                string fileNameHash = file.Name.SHA1();

                string fileClickLabel = file.IsDirectory ? "Open directory" : "Download";

                <div class="accordion-item">

                    <h2 class="accordion-header" 
                        id="heading_@fileNameHash">

                        <button class="accordion-button collapsed" 
                                style="word-wrap: anywhere"
                                type="button"
                                aria-expanded="false" 
                                data-bs-toggle="collapse"
                                data-bs-target="#collapse_@fileNameHash"
                                aria-controls="collapse_@fileNameHash">
                            @(file.Name.TrimEnd('/').TrimEnd('\\') + (file.IsDirectory ? "/" : string.Empty))
                        </button>
                    </h2>

                    <div id="collapse_@fileNameHash"
                         class="accordion-collapse collapse"
                         aria-labelledby="heading_@fileNameHash"
                         data-bs-parent="#accordion">

                        <div class="accordion-body">

                            @if(!isDotDotDir)
                            {
                            <p>
                                Full path:<br />
                                <strong><code>@file.FullName</code></strong>
                            </p>

                            <p>
                                Last accessed:<br />
                                <strong><code>@file.LastAccessTime.ToString("yyyy-MM-dd HH:mm:ss")</code></strong>
                            </p>
                        
                            <p>
                                Last modified:<br />
                                <strong><code>@file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")</code></strong>
                            </p>

                            <p>
                                Permissions:<br />
                                <strong><code title="@file.ToHumanReadablePermissionMatrix()">@file.ToOctalNotation()</code></strong>
                            </p>
                        
                            <p>
                                Owner:<br />
                                <strong><code>@file.UserId:@file.GroupId</code></strong>
                            </p>
                            }

                            <button class="btn btn-primary mt-3 stretch-when-narrow"
                                    title="@fileClickLabel"
                                    @onclick="() => OnClickFile(file)"
                                    data-bs-toggle="collapse"
                                    data-bs-target="#collapse_@(file.IsDirectory ? fileNameHash : string.Empty)"
                                    aria-controls="collapse_@fileNameHash"
                                    type="button">
                                <span class="oi @(file.IsDirectory ? "oi-folder" : "oi-data-transfer-download")"></span> <span class="mobile-only">@fileClickLabel</span>
                            </button>

                            @if(!isDotDotDir)
                            {

                            <button class="btn btn-secondary mt-3 stretch-when-narrow"
                                    title="Rename"
                                    @onclick="() => OnClickRename(file)"
                                    type="button">
                                <span class="oi oi-pencil"></span> <span class="mobile-only">Rename</span>
                            </button>

                            <button class="btn btn-secondary mt-3 stretch-when-narrow"
                                    title="Change permissions"
                                    @onclick="() => OnClickSetPermissions(file)"
                                    type="button">
                                <span class="oi oi-shield"></span> <span class="mobile-only">Change permissions</span>
                            </button>

                            <button class="btn btn-danger mt-3 stretch-when-narrow"
                                    title="Delete"
                                    @onclick="() => OnClickDelete(file)"
                                    data-bs-toggle="collapse"
                                    data-bs-target="#collapse_@fileNameHash"
                                    aria-controls="collapse_@fileNameHash"
                                    type="button">
                                <span class="oi oi-trash"></span> <span class="mobile-only">Delete</span>
                            </button>

                            }
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>

    <table class="table table-hover @(files.Count() > 2 ? "table-striped" : "") desktop-only">

        <thead>

        <tr>

            <th style="min-width: 96px">
                Actions
            </th>

            <th style="width: 66%">
                File or directory name
            </th>

            <th title="Format: yyyy-MM-dd HH:mm:ss"
                style="min-width: 192px">
                Last accessed
            </th>

            <th title="Format: yyyy-MM-dd HH:mm:ss"
                style="min-width: 192px" 
                class="hide-when-narrower-than-1280px">
                Last modified
            </th>

            <th style="min-width: 128px">
                Permissions
            </th>

            <th style="min-width: 64px">
                UID
            </th>

            <th style="min-width: 64px">
                GID
            </th>

        </tr>

        </thead>

        <tbody>

        @foreach (SftpFile file in files)
        {
            if (file.Name == "." || (file.Name == ".." && currentDirectory.Count(c => c is '/' or '\\') <= 1))
            {
                continue;
            }

            <tr>

                <td>
                    @if (file.Name != "..")
                    {
                        <span class="oi oi-trash"
                              title="Delete"
                              @onclick="() => OnClickDelete(file)">
                        </span>

                        <span class="oi oi-pencil"
                              title="Rename"
                              @onclick="() => OnClickRename(file)">
                        </span>

                        <span class="oi oi-shield"
                              title="Set permissions"
                              @onclick="() => OnClickSetPermissions(file)">
                        </span>
                    }
                </td>

                <td title="@file.FullName">

                    <a href="javascript:void(0)"
                       class="underline-on-hover"
                       @onclick="() => OnClickFile(file)">
                        @file.Name@(file.IsDirectory ? "/" : "")
                    </a>

                </td>

                <td title="@file.LastAccessTimeUtc.ToString("yyyy-MM-dd HH:mm:ss") (UTC)">
                    @file.LastAccessTime.ToString("yyyy-MM-dd HH:mm:ss")
                </td>

                <td title="@file.LastWriteTimeUtc.ToString("yyyy-MM-dd HH:mm:ss") (UTC)"
                    class="hide-when-narrower-than-1280px">
                    @file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
                </td>

                <td title="@file.ToHumanReadablePermissionMatrix()">
                    @file.ToOctalNotation()
                </td>

                <td>
                    @file.UserId
                </td>

                <td>
                    @file.GroupId
                </td>

            </tr>
        }

        </tbody>

    </table>

    <button @onclick="OnClickUpload"
        disabled="@UploadLock.IsLocked"
            class="btn btn-primary mt-4 stretch-when-narrow">
        Upload
    </button>

    <span style="margin-left: 8px; margin-right: 8px;"></span>

    <button @onclick="OnClickCreateDirectory"
            disabled="@UploadLock.IsLocked"
            class="btn btn-primary mt-4 stretch-when-narrow">
        Create directory
    </button>

    @if (uploadProgress.NotNullNotEmpty())
    {
        <br />
        <br />

        <p>
            <strong>Uploads:</strong>
        </p>

        @foreach (var kvp in uploadProgress)
        {
            <p>
                @kvp.Key (@kvp.Value.Item1.ToFileSizeString() / @kvp.Value.Item2.ToFileSizeString())
            </p>

            <div class="progress">
                <div class="progress-bar @((double)(kvp.Value.Item1) / (double)(kvp.Value.Item2) >= 0.999d ? "bg-success" : "progress-bar-striped progress-bar-animated")"
                     role="progressbar"
                     aria-valuenow="@kvp.Value.Item1"
                     aria-valuemin="0"
                     aria-valuemax="@kvp.Value.Item2"
                     style="width: @(((double)(kvp.Value.Item1) / (double)(kvp.Value.Item2)) * 100)%;">
                 </div>
            </div>

            <br />
        }
    }

    @if (downloadProgress.NotNullNotEmpty())
    {
        <br />
        <br />

        <p>
            <strong>Downloads:</strong>
        </p>

        @foreach (var kvp in downloadProgress)
        {
            <p>
                @kvp.Key (@kvp.Value.Item1.ToFileSizeString() / @kvp.Value.Item2.ToFileSizeString())
            </p>

            <div class="progress">
                <div class="progress-bar @((double)(kvp.Value.Item1) / (double)(kvp.Value.Item2) >= 0.999d ? "bg-success" : "progress-bar-striped progress-bar-animated")"
                     role="progressbar"
                     aria-valuenow="@kvp.Value.Item1"
                     aria-valuemin="0"
                     aria-valuemax="@kvp.Value.Item2"
                     style="width: @(((double)(kvp.Value.Item1) / (double)(kvp.Value.Item2)) * 100)%;">
                </div>
            </div>

            <br />
        }
    }

    <br />
    <br />
}

@code
{
    private volatile int lastRefreshUI;
    private string currentDirectory = ".";
    private SftpConfig currentSftpConfig = null;
    private ISftpService sftpService = null;
    private IEnumerable<SftpFile> files = null;
    private readonly IDictionary<string, (ulong, ulong)> uploadProgress = new ConcurrentDictionary<string, (ulong, ulong)>();
    private readonly IDictionary<string, (ulong, ulong)> downloadProgress = new ConcurrentDictionary<string, (ulong, ulong)>();

    protected override async Task OnInitializedAsync()
    {
        UploadLock.ChangedLockState += OnChangedUploadLockState;

        string lastSftpConfigId = await SecureStorage.GetAsync(Constants.PreferenceIds.LAST_SFTP_CONFIG_ID);

        currentDirectory = await SecureStorage.GetAsync(Constants.PreferenceIds.LAST_DIRECTORY);

        currentSftpConfig = await ConfigStorage.Get(lastSftpConfigId);

        if (currentSftpConfig is null)
        {
            await Application.Current!.MainPage!.DisplayAlert("Please select a connection", "To browse a remote SFTP server, on the app's home page select a connection from your list of saved connections or add a new one to get started.", "OK");
            NavigationManager.NavigateTo("/");
            return;
        }

        if (currentSftpConfig.PrivateKey.NullOrEmpty() && currentSftpConfig.Password.NullOrEmpty())
        {
            string password = await Application.Current!.MainPage!.DisplayPromptAsync("Enter password", $"Please enter the password for user {currentSftpConfig.Username} on {currentSftpConfig.Host}:{currentSftpConfig.Port}\n", "Login", "Cancel");

            if (password.NullOrEmpty())
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            else
            {
                currentSftpConfig.Password = password;
            }
        }

        if (currentDirectory.NullOrEmpty())
        {
            currentDirectory = currentSftpConfig.DefaultRemoteDirectory;
        }

        sftpService = new SftpService(currentSftpConfig);

        await OpenDirectory(currentDirectory);

        OnChangedUploadLockState(UploadLock.IsLocked);
    }

    private void OnChangedUploadLockState(bool nowLocked)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnClickDisconnect()
    {
        UploadLock.Unlock();

        currentDirectory = string.Empty;

        SecureStorage.Remove(Constants.PreferenceIds.LAST_DIRECTORY);
        SecureStorage.Remove(Constants.PreferenceIds.LAST_SFTP_CONFIG_ID);

        NavigationManager.NavigateTo("/");
    }

    private async Task OnClickFile(SftpFile file)
    {
        if (file is null)
        {
            return;
        }

        if (file.IsDirectory)
        {
            if (file.Name == "..")
            {
                if (currentDirectory.Contains('\\'))
                {
                    await OpenDirectory(currentDirectory[..currentDirectory.LastIndexOf('\\')]);
                }
                else
                {
                    await OpenDirectory(currentDirectory[..currentDirectory.LastIndexOf('/')].Replace("\\", "/"));
                }

                return;
            }

            await OpenDirectory(file.FullName);
        }
        else if (file.IsRegularFile)
        {
            PermissionStatus status = await Permissions.RequestAsync<Permissions.StorageWrite>();

            if (status != PermissionStatus.Granted)
            {
                await Application.Current.MainPage.DisplayAlert("Insufficient permissions", $"This app requires permission to access your storage in order to download files.", "OK");
                return;
            }

            string downloadFolder = await SecureStorage.GetAsync(Constants.PreferenceIds.LAST_DOWNLOAD_DIRECTORY);

            if (downloadFolder is null || !Directory.Exists(downloadFolder))
            {
                downloadFolder = string.Empty;
            }

            try
            {
                var folderPickerResult = await FolderPicker.Default.PickAsync(downloadFolder, CancellationToken.None);

                folderPickerResult.EnsureSuccess();

                downloadFolder = folderPickerResult.Folder.Path;
            }
            catch
            {
                return;
            }

            await SecureStorage.SetAsync(Constants.PreferenceIds.LAST_DOWNLOAD_DIRECTORY, downloadFolder);

            string downloadPath = Path.Combine(downloadFolder, file.Name);

            if (File.Exists(downloadPath))
            {
                bool overwriteExistingFile = await Application.Current.MainPage.DisplayAlert("File name collision", $"There is already a file named \"{file.Name}\" inside \"{downloadFolder}\".\n\nHow do you want to handle this file name collision?", cancel: "Cancel", accept: "Overwrite");

                if (!overwriteExistingFile)
                {
                    return;
                }
            }

            try
            {
                Stream fileStream = new FileStream(downloadPath, FileMode.OpenOrCreate, FileAccess.ReadWrite);

                downloadProgress[file.Name] = (0, (ulong)file.Length);

                long lastRefreshUtc = DateTime.UtcNow.ToUnixTimeMilliseconds();

                await sftpService.DownloadFileAsync(file.FullName, fileStream, (ulong progress) =>
                {
                    (ulong, ulong) downloadProgressTuple = downloadProgress[file.Name];

                    downloadProgressTuple.Item1 = progress;

                    downloadProgress[file.Name] = downloadProgressTuple;

                    long utcNow = DateTime.UtcNow.ToUnixTimeMilliseconds();

                    if (utcNow - lastRefreshUtc > 64)
                    {
                        InvokeAsync(StateHasChanged);

                        lastRefreshUtc = utcNow;
                    }

                    if (progress == (ulong)file.Length)
                    {
                        _ = Task.Run(async () =>
                        {
                            await Task.Delay(256 * 8);

                            fileStream.Dispose();
                            fileStream = null;

                            downloadProgress.Remove(file.Name);

                            await InvokeAsync(StateHasChanged);

                            const double toastFontSize = 14;
                            const string toastText = "Download finished";
                            const ToastDuration toastDuration = ToastDuration.Short;

                            await Toast
                               .Make(toastText, toastDuration, toastFontSize)
                               .Show(default);
                        });
                    }
                });
            }
            catch
            {
                await Application.Current.MainPage.DisplayAlert("File download failed", $"Failed to download file \"{file.Name}\" inside \"{Path.GetDirectoryName(file.FullName)}\".\n\nPerhaps double-check permissions?", "OK");
            }
        }
        else
        {
            await Application.Current.MainPage.DisplayAlert("Access failed", $"Failed to access entry \"{file.Name}\" - unknown entry type!", "OK");
        }
    }

    private async Task OpenDirectory(string remoteDirectory, bool forceRefresh = false)
    {
        if (sftpService is null || currentSftpConfig is null)
        {
            return;
        }

        if (!sftpService.StillConnected)
        {
            if (Application.Current?.MainPage is not null)
            {
                await Application.Current.MainPage.DisplayAlert("Connection lost", $"Connection lost to {currentSftpConfig.Username}@{currentSftpConfig.Host}", "OK");
            }

            NavigationManager.NavigateTo("/");
            return;
        }

        if (remoteDirectory.NullOrEmpty())
        {
            remoteDirectory = ".";
        }
        else
        {
            remoteDirectory = remoteDirectory.Replace('\\', '/');
        }

        if (!await sftpService.ExistsAsync(remoteDirectory))
        {
            if (Application.Current?.MainPage is not null)
            {
                if (await Application.Current.MainPage.DisplayAlert("Directory access failed", $"The directory \"{remoteDirectory}\" couldn't be accessed. How do you want to proceed?", "Return to default directory", "Cancel (stay in current directory)"))
                {
                    if (await sftpService.ExistsAsync(currentSftpConfig.DefaultRemoteDirectory))
                    {
                        await OpenDirectory(currentSftpConfig.DefaultRemoteDirectory);
                        return;
                    }

                    if (await sftpService.ExistsAsync("."))
                    {
                        await OpenDirectory(".");
                        return;
                    }
                }
                else return;
            }
        }

        currentDirectory = remoteDirectory;

        files = (await sftpService.ListAllAsync(currentDirectory))
            .OrderByDescending(f => f.Name == "..")
            .ThenByDescending(f => f.IsDirectory)
            .ThenBy(f => f.Name);

        await SecureStorage.SetAsync(Constants.PreferenceIds.LAST_DIRECTORY, currentDirectory);

        if (forceRefresh)
        {
            NavigationManager.NavigateTo("/browse", true);
        }
    }

    private bool HasDuplicateFileNames(IEnumerable<FileResult> files)
    {
        return files
            .GroupBy(file => file.FileName)
            .Any(fileGroup => fileGroup.Count() > 1);
    }

    private string GetDuplicateFileNames(IEnumerable<FileResult> files)
    {
        return files
            .GroupBy(file => file.FileName)
            .Where(group => group.Count() > 1)
            .SelectMany(g => g)
            .DistinctBy(f => f.FileName)
            .Select(f => f.FileName)
            .ToCustomCharSeparatedString('\n');
    }

    private async Task OnClickUpload()
    {
        PermissionStatus status = await Permissions.RequestAsync<Permissions.StorageRead>();

        if (status != PermissionStatus.Granted)
        {
            await Application.Current.MainPage.DisplayAlert("Insufficient permissions", "This app requires permission to access your storage in order to download files.", "OK");
            return;
        }

        if (UploadLock.IsLocked)
        {
            return;
        }

        UploadLock.Lock();

        IEnumerable<FileResult> files = await FilePicker.Default.PickMultipleAsync(PickOptions.Default);

        if (!files.Any())
        {
            UploadLock.Unlock();
            return;
        }

        if (HasDuplicateFileNames(files))
        {
            await Application.Current.MainPage.DisplayAlert("Upload failed", $"You selected the following file names more than once:\n\n{GetDuplicateFileNames(files)}\"\n\nDuplicate file names within a single directory are not allowed. Please reselect files with distinct file names.", "OK");
            UploadLock.Unlock();
            return;
        }

        IList<string> fileNameCollisions = new List<string>();

        foreach (SftpFile file in this.files)
        {
            if (files.Any(f => f.FileName == file.Name))
            {
                fileNameCollisions.Add(file.Name);
            }
        }

        if (fileNameCollisions.NotNullNotEmpty())
        {
            bool overwriteExistingFiles = await Application.Current.MainPage.DisplayAlert("File name collisions", "One or more files that you selected have a file name that is already present in the remote directory.\n\nHow do you want to handle these file name collisions?", cancel: "Skip", accept: "Overwrite");

            if (!overwriteExistingFiles)
            {
                files = files.Where(file => !fileNameCollisions.Contains(file.FileName));
            }
        }

        if (!files.Any())
        {
            UploadLock.Unlock();
            return;
        }

        uploadProgress.Clear();

        IList<Task> uploadTasks = new List<Task>();

        foreach (FileResult file in files)
        {
            if (Directory.Exists(file.FullPath)) // Uploading entire directories is not yet supported.
            {
                continue;
            }

            await using Stream fileStream = await file.OpenReadAsync();

            ulong fileSizeBytes = (ulong)fileStream.Length; // Type-casts from hell, uh oh ;D

            uploadProgress[file.FileName] = (0, fileSizeBytes);

            Task uploadTask = sftpService.UploadFileAsync(file.FullPath, $"{currentDirectory.TrimEnd('/').TrimEnd('\\')}/{file.FileName}", true, (ulong progress) =>
            {
                (ulong, ulong) uploadProgressTuple = uploadProgress[file.FileName];

                uploadProgressTuple.Item1 = progress;

                uploadProgress[file.FileName] = uploadProgressTuple;

                int utcNow = (int)DateTime.UtcNow.ToUnixTimeMilliseconds();

                if (utcNow - lastRefreshUI > 256)
                {
                    lastRefreshUI = utcNow;
                    InvokeAsync(StateHasChanged);
                }
            });

            uploadTasks.Add(uploadTask);
        }

        await Task.WhenAll(uploadTasks);

        uploadProgress.Clear();

        UploadLock.Unlock();

        const double toastFontSize = 14;
        const string toastText = "Upload queue completed";
        const ToastDuration toastDuration = ToastDuration.Short;

        await Toast
          .Make(toastText, toastDuration, toastFontSize)
          .Show(default);

        await OpenDirectory(currentDirectory);
    }

    private async Task OnClickCreateDirectory()
    {
        if (sftpService is null || Application.Current?.MainPage is null || UploadLock.IsLocked)
        {
            return;
        }

        string directoryName = await Application.Current.MainPage.DisplayPromptAsync("Enter new directory name", "Enter name for the new directory\n", "Create", "Cancel", keyboard: Keyboard.Text);

        if (directoryName.NullOrEmpty())
        {
            return;
        }

        directoryName = $"{currentDirectory.TrimEnd('/').TrimEnd('\\')}/{directoryName}";

        bool success = sftpService.CreateDirectory(directoryName);

        if (success)
        {
            const double toastFontSize = 14;
            const string toastText = "Directory creation successful";
            const ToastDuration toastDuration = ToastDuration.Short;

            await Toast
              .Make(toastText, toastDuration, toastFontSize)
              .Show(default);

            await OpenDirectory(directoryName);
        }
        else
        {
            await Application.Current.MainPage.DisplayAlert("Directory creation failed", $"Failed to create directory \"{directoryName}\" - perhaps double-check permissions?", "OK");
        }
    }

    private async Task OnClickRename(SftpFile file)
    {
        if (file is null || sftpService is null || Application.Current?.MainPage is null)
        {
            return;
        }

        string objectType = (file.IsDirectory ? "directory" : "file");

        if (!await sftpService.ExistsAsync(file.FullName))
        {
            await Application.Current.MainPage.DisplayAlert($"Renaming {objectType} \"{file.Name}\" failed", $"Failed to rename {objectType} \"{file.Name}\" because it was not found in the remote directory \"{currentDirectory}\".\n\nPlease refresh and try again, or double-check permissions.", "OK");
            return;
        }

        string newName = await Application.Current.MainPage.DisplayPromptAsync($"Enter new {objectType} name", $"Enter new name for \"{file.FullName}\"\n", "Rename", "Cancel", keyboard: Keyboard.Text, initialValue: file.Name);

        if (newName.NullOrEmpty())
        {
            return;
        }

        if (!newName.IsValidFileName())
        {
            await Application.Current.MainPage.DisplayAlert($"Renaming {objectType} \"{file.Name}\" failed", $"Failed to rename {objectType} \"{file.Name}\" because the new file name you entered is either empty or invalid. Please only use allowed file name characters!", "OK");
            return;
        }

        string newRemotePath = $"{currentDirectory.TrimEnd('/').TrimEnd('\\')}/{newName}";

        if (await sftpService.ExistsAsync(newRemotePath))
        {
            await Application.Current.MainPage.DisplayAlert($"Renaming {objectType} \"{file.Name}\" failed", $"Failed to rename {objectType} \"{file.Name}\" because there already is a {objectType} with that name under \"{currentDirectory}\"", "OK");
            return;
        }

        if (file.IsRegularFile)
        {
            string ext = Path.GetExtension(file.FullName);
            string newExt = Path.GetExtension(newName);

            if (!ext.Equals(newExt, StringComparison.InvariantCultureIgnoreCase) && !await Application.Current.MainPage.DisplayAlert("File extension mismatch", "You entered a new name whose file extension does not match the previous one. Are you sure that that's you want?", "Proceed", "Cancel"))
            {
                return;
            }

            if (newExt.NullOrEmpty() && !await Application.Current.MainPage.DisplayAlert("File extension?", "You entered a name without a file extension. Are you sure that that's you want?", "Proceed", "Cancel"))
            {
                return;
            }
        }

        bool success = sftpService.Rename(file.FullName, newRemotePath);

        if (success)
        {
            const double toastFontSize = 14;
            const string toastText = "Item renamed successfully";
            const ToastDuration toastDuration = ToastDuration.Short;

            await Toast
              .Make(toastText, toastDuration, toastFontSize)
              .Show(default);

            await OpenDirectory(currentDirectory);
        }
        else
        {
            await Application.Current.MainPage.DisplayAlert($"Renaming {objectType} \"{file.Name}\" failed", $"Failed to rename {objectType} \"{file.Name}\" - perhaps double-check permissions?", "OK");
        }
    }

    private async Task OnClickSetPermissions(SftpFile file)
    {
        if (file is null || sftpService is null || Application.Current?.MainPage is null)
        {
            return;
        }

        string objectType = (file.IsDirectory ? "directory" : "file");

        if (!await sftpService.ExistsAsync(file.FullName))
        {
            await Application.Current.MainPage.DisplayAlert($"chmod failed", $"Failed to chmod the {objectType} \"{file.Name}\" because it was not found in the remote directory \"{currentDirectory}\".\n\nPlease refresh and try again, or double-check permissions.", "OK");
            return;
        }

        string chmodString = await Application.Current.MainPage.DisplayPromptAsync("Enter new permission octal", "Enter the new permission set in octal notation (as if you were running \"chmod\" on a *nix server).\n\nE.g. 640, 760, etc...\n", "Save", "Cancel", keyboard: Keyboard.Numeric);

        if (chmodString.NullOrEmpty())
        {
            return;
        }

        if (chmodString.Length != 3 || !short.TryParse(chmodString, out short chmod))
        {
            await Application.Current.MainPage.DisplayAlert("Invalid permission octal", $"The value {chmodString} is not a valid Unix permission octal.\n\nPlease enter a valid value such as 640, 760, etc...\n\nRefer to https://chmod-calculator.com for a simple, learning-by-doing overview of what values are valid here.\n", "OK");
            return;
        }

        switch(chmod)
        {
            case >= 0 and <= 777:
            {
                break;
            }
            default:
            {
                await Application.Current.MainPage.DisplayAlert("Invalid permission octal", $"The value {chmodString} is not a valid Unix permission octal.\n\nPlease enter a valid value such as 640, 760, etc...\n\nRefer to https://chmod-calculator.com for a simple, learning-by-doing overview of what values are valid here.\n", "OK");
                return;
            }
        }

        bool recursively = file.IsDirectory && await Application.Current.MainPage.DisplayAlert("Change directory permissions", $"You're changing permissions for \"{file.FullName}\", which is a directory. Do you want to set the permissions recursively in every subdirectory and files as well, or only this specific directory?\n", "Recursively", "Only this one");

        bool success = sftpService.ChangePermissions(file.FullName, chmod, recursively);

        if (!success)
        {
            await Application.Current.MainPage.DisplayAlert("chmod result", $"One or more files/subdirectories could not be \"chmodded\" into the permissions octal {chmod}", "OK");
        }

        const double toastFontSize = 14;
        const string toastText = "chmod operation completed";
        const ToastDuration toastDuration = ToastDuration.Short;

        await Toast
          .Make(toastText, toastDuration, toastFontSize)
          .Show(default);

        await OpenDirectory(currentDirectory);
    }

    private async Task OnClickDelete(SftpFile file)
    {
        if (file is null || sftpService is null || Application.Current?.MainPage is null)
        {
            return;
        }

        string objectType = (file.IsDirectory ? "directory" : "file");

        if (!await sftpService.ExistsAsync(file.FullName))
        {
            await Application.Current.MainPage.DisplayAlert($"Deleting {objectType} \"{file.Name}\" failed", $"Failed to delete the {objectType} \"{file.Name}\" because it was not found in the remote directory \"{currentDirectory}\".\n\nPlease refresh and try again, or double-check permissions.", "OK");
            return;
        }

        string prompt = (file.IsDirectory ? $"directory \"{file.FullName}\" and all its files and sub-folders" : $"file \"{file.Name}\"");

        if (!await Application.Current.MainPage.DisplayAlert("Are you sure?", $"Do you really want to delete the {prompt}?", "Yes, delete", "No, keep"))
        {
            return;
        }

        if (!sftpService.Delete(file))
        {
            await Application.Current.MainPage.DisplayAlert("Deletion failed", $"Deleting {(file.IsDirectory ? "one or more files/sub-folders inside " : string.Empty)}{file.FullName} failed. Perhaps double-check permissions?", "OK");
            return;
        }

        await OpenDirectory(currentDirectory);

        const double toastFontSize = 14;
        const string toastText = "Item deletion successful";
        const ToastDuration toastDuration = ToastDuration.Short;

        await Toast
          .Make(toastText, toastDuration, toastFontSize)
          .Show(default);
    }
}