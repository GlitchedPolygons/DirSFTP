@*
    DirSFTP
    Copyright (C) 2023  Raphael Beck

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@page "/browse"

@inject NavigationManager NavigationManager

@inject IConfigStorage ConfigStorage

<PageTitle>
    DirSFTP - @currentDirectory
</PageTitle>

@using Renci.SshNet.Sftp
@using GlitchedPolygons.DirSFTP.Models
@using GlitchedPolygons.DirSFTP.Services
@using GlitchedPolygons.DirSFTP.ExtensionMethods
@using GlitchedPolygons.DirSFTP.Services.Config
@using GlitchedPolygons.DirSFTP.Services.SFTP
@using GlitchedPolygons.ExtensionMethods
@using Renci.SshNet

<h1>
    SFTP Browser
</h1>

<br />

@if (currentSftpConfig is not null)
{
    <p>
        Connected to @currentSftpConfig.Host:@currentSftpConfig.Port as @currentSftpConfig.Username
    </p>
}

<br />

@if (files == null)
{
    <br />

    <p style="margin: 64px;">
        <em style="margin: 64px;">
            Loading...
        </em>
    </p>
}
else
{
    <table class="table">

        <thead>

        <tr>

            <th>
                Name
            </th>

            <th title="Format: yyyy-MM-dd HH:mm:ss">
                Last accessed
            </th>

            <th title="Format: yyyy-MM-dd HH:mm:ss">
                Last modified
            </th>

            <th>
                Permissions
            </th>

            <th>
                UID
            </th>

            <th>
                GID
            </th>

        </tr>

        </thead>

        <tbody>

        @foreach (SftpFile file in files)
        {
            if (file.Name == "." || (file.Name == ".." && currentDirectory.Count(c => c is '/' or '\\') <= 1))
            {
                continue;
            }

            <tr @onclick="() => OnClickFile(file)">

                <td title="@file.FullName">
                    @file.Name@(file.IsDirectory ? "/" : "")
                </td>

                <td title="@file.LastAccessTimeUtc.ToString("yyyy-MM-dd HH:mm:ss") (UTC)">
                    @file.LastAccessTime.ToString("yyyy-MM-dd HH:mm:ss")
                </td>

                <td title="@file.LastWriteTimeUtc.ToString("yyyy-MM-dd HH:mm:ss") (UTC)">
                    @file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss")
                </td>

                <td title="@file.ToHumanReadablePermissionMatrix()">
                    @file.ToOctalNotation()
                </td>

                <td>
                    @file.UserId
                </td>

                <td>
                    @file.GroupId
                </td>

            </tr>
        }

        </tbody>

    </table>
}

@code
{
    private string currentDirectory = ".";
    private SftpConfig currentSftpConfig = null;
    private ISftpService sftpService = null;
    private IEnumerable<SftpFile> files = null;

    protected override async Task OnInitializedAsync()
    {
        string lastSftpConfigId = await SecureStorage.GetAsync(Constants.PreferenceIds.LAST_SFTP_CONFIG_ID);

        currentDirectory = await SecureStorage.GetAsync(Constants.PreferenceIds.LAST_DIRECTORY);

        currentSftpConfig = await ConfigStorage.Get(lastSftpConfigId);

        if (currentSftpConfig is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        if (currentDirectory.NullOrEmpty())
        {
            currentDirectory = currentSftpConfig.DefaultRemoteDirectory;
        }

        sftpService = new SftpService(currentSftpConfig);

        await OpenDirectory(currentDirectory);
    }

    private async Task OnClickFile(SftpFile file)
    {
        if (file is null)
        {
            return;
        }

        if (file.IsDirectory)
        {
            if (file.Name == "..")
            {
                if (currentDirectory.Contains('\\'))
                {
                    await OpenDirectory(currentDirectory[..currentDirectory.LastIndexOf('\\')]);
                }
                else
                {
                    await OpenDirectory(currentDirectory[..currentDirectory.LastIndexOf('/')].Replace("\\", "/"));
                }

                return;
            }

            await OpenDirectory(file.FullName);
        }
        else if (file.IsRegularFile)
        {
    // TODO
        }
        else
        {
    // TODO
        }
    }

    private async Task OpenDirectory(string remoteDirectory)
    {
        if (sftpService is null || currentSftpConfig is null)
        {
            return;
        }

        if (!sftpService.StillConnected)
        {
            if (Application.Current?.MainPage is not null)
            {
                await Application.Current.MainPage.DisplayAlert("Connection lost", $"Connection lost to {currentSftpConfig.Username}@{currentSftpConfig.Host}", "OK");
            }

            NavigationManager.NavigateTo("/");
            return;
        }

        remoteDirectory = remoteDirectory.Replace('\\', '/');

        if (!sftpService.DirectoryExists(remoteDirectory))
        {
            if (Application.Current?.MainPage is not null)
            {
                if (await Application.Current.MainPage.DisplayAlert("Directory access failed", $"The directory \"{remoteDirectory}\" couldn't be accessed. How do you want to proceed?", "Return to default directory", "Cancel (stay in current directory)"))
                {
                    if (sftpService.DirectoryExists(currentSftpConfig.DefaultRemoteDirectory))
                    {
                        await OpenDirectory(currentSftpConfig.DefaultRemoteDirectory);
                        return;
                    }

                    if (sftpService.DirectoryExists("."))
                    {
                        await OpenDirectory(".");
                        return;
                    }
                }
                else return;
            }
        }

        currentDirectory = remoteDirectory;

        files = sftpService.ListAllFiles(currentDirectory);

        await SecureStorage.SetAsync(Constants.PreferenceIds.LAST_DIRECTORY, currentDirectory);
    }
}