@*
    DirSFTP
    Copyright (C) 2023  Raphael Beck

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject IConfigStorage ConfigStorage
@inject IFingerprintService FingerprintService
@inject NavigationManager NavigationManager

@page "/connection-editor"
@page "/connection-editor/{ConnectionDetailsJsonB64}"

@using GlitchedPolygons.ExtensionMethods
@using GlitchedPolygons.DirSFTP.Models
@using GlitchedPolygons.DirSFTP.Services.Config
@using GlitchedPolygons.DirSFTP.Services.HostKey
@using System.Text.Json

<PageTitle>DirSFTP - Add new connection</PageTitle>

<h1>
    @(createNew ? "Add new" : "Modify") SFTP connection @(createNew ? "" : "details")
</h1>

<br />

<p>
    Save a @(createNew ? "new" : "") set of SFTP connection details by compiling the form below.
</p>

<p>
    Make sure to double-check all the fields against typos!
</p>


<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Host
    </label>

    <input type="text"
           class="form-control"
           placeholder="sftp.example.com"
           @bind="host" />

</div>

<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Port
    </label>

    <input type="text"
           class="form-control"
           placeholder="Default port for SSH is 22"
           @bind="port" />

</div>

<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Username
    </label>

    <input type="text"
           class="form-control"
           placeholder="gordon"
           @bind="username" />

</div>

@*

Save password is forced on until .NET MAUI Blazor offers a way to display a text-input prompt that allows for the typed in characters to be hidden.

https://github.com/dotnet/maui/issues/15817

<div class="form-group mt-3 connection-editor-form-group">

    <input class="form-check-input"
           type="checkbox"
           @bind="savePassword"
           id="savePassword">

    <label class="form-check-label"
           for="savePassword">
        Save password
    </label>

</div>

*@

<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Password
    </label>

    <input type="password"
           class="form-control"
           placeholder="gaben"
           style="margin-right: 4px;"
           @bind="password" />

</div>

<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Private key
    </label>

    <textarea @bind="privateKey" rows="7" class="form-control" placeholder="@PRIVATE_KEY_TOOLTIP.TrimStart()" style="min-height: 64px; max-height: 512px;"></textarea>

</div>

<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Private key passphrase
    </label>

    <input type="password"
           class="form-control"
           @bind="privateKeyPassphrase" />

</div>

<div class="form-group mt-2 connection-editor-form-group">

    <label class="form-label">
        Default remote directory
    </label>

    <input class="form-control"
           @bind="remoteDirectory" />
</div>

<div class="form-group mt-4 connection-editor-form-group"
     style="padding-bottom: 8px;">

    <button class="btn btn-secondary stretch-when-narrow"
            @onclick="OnClickCancel">
        Cancel
    </button>

    <button class="btn btn-primary stretch-when-narrow"
            @onclick="OnClickSave">
        Save
    </button>

</div> 

<br />
<br />

@code
{
    [Parameter]
    public string ConnectionDetailsJsonB64 { get; set; } = null;

    private string host = string.Empty;
    private int? port;
    private bool savePassword = true;
    private bool createNew = true;
    private string username = string.Empty;
    private string password = string.Empty;
    private string privateKey = string.Empty;
    private string privateKeyPassphrase = string.Empty;
    private string remoteDirectory = string.Empty;

        private const string PRIVATE_KEY_TOOLTIP = @"

PEM-formatted private key. The following key types are supported:

    - RSA in OpenSSL PEM and ssh.com format
    - DSA in OpenSSL PEM and ssh.com format
    - ECDSA 256/384/521 in OpenSSL PEM format
    - ECDSA 256/384/521 in OpenSSH key format
    - Ed25519 and RSA in OpenSSH key format

Private keys can be encrypted using one of the following cipher methods:

    - DES-EDE3-CBC
    - DES-EDE3-CFB
    - DES-CBC
    - AES-128-CBC
    - AES-192-CBC
    - AES-256-CBC
";

    protected override async Task OnInitializedAsync()
    {
        if (ConnectionDetailsJsonB64.NotNullNotEmpty())
        {
            string json = ConnectionDetailsJsonB64.FromBase64String();

            using MemoryStream utf8JsonStream = new(json.UTF8GetBytes());

            SftpConfig config = await JsonSerializer.DeserializeAsync<SftpConfig>(utf8JsonStream);

            createNew = false;
            host = config.Host;
            port = config.Port;
            savePassword = config.Password.NotNullNotEmpty();
            username = config.Username ?? string.Empty;
            password = config.Password ?? string.Empty;
            privateKey = config.PrivateKey ?? string.Empty;
            privateKeyPassphrase = config.PrivateKeyPassphrase ?? string.Empty;
            remoteDirectory = config.DefaultRemoteDirectory ?? string.Empty;
        }
    }

    private void OnClickCancel()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task OnClickSave()
    {
        if (host.NullOrEmpty())
        {
            Application.Current?.MainPage?.DisplayAlert("Host undefined", "Please insert a valid host value into the host field!", "OK");
            return;
        }

        if (username.NullOrEmpty())
        {
            Application.Current?.MainPage?.DisplayAlert("Username undefined", "Please insert a valid username value into the username field!", "OK");
            return;
        }

        if (port is null or 0)
        {
            port = 22;
        }

        string hostId = $"{username}@{host}:{port}";
        string configId = hostId.SHA256();

        SftpConfig config = await ConfigStorage.Get(configId);

        if (config is null)
        {
            config = CreateConfig();

            await ConfigStorage.Add(config, true);

            goto exit;
        }

        if (createNew)
        {
            if (Application.Current?.MainPage is not null && !await Application.Current.MainPage.DisplayAlert("Connection already exists", $"You already have a connection saved for {hostId} - how do you want to proceed?", "Overwrite existing", "Cancel"))
            {
                return;
            }
        }

        config = CreateConfig();

        await ConfigStorage.Add(config, true);

        exit:

        await FingerprintService.CheckFingerprint(host, port.Value);

        NavigationManager.NavigateTo("/");
    }

    private SftpConfig CreateConfig()
    {
        return new SftpConfig
        {
            Host = host,
            Port = port ?? 22,
            Username = username,
            PrivateKey = privateKey,
            PrivateKeyPassphrase = privateKeyPassphrase,
            Password = savePassword ? password : string.Empty,
            DefaultRemoteDirectory = remoteDirectory ?? string.Empty
        };
    }
}