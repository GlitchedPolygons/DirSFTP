@*
    DirSFTP
    Copyright (C) 2023  Raphael Beck

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*@

@inject IConfigStorage ConfigStorage
@inject IViewportService ViewportService
@inject IFingerprintService FingerprintService
@inject NavigationManager NavigationManager

@page "/"

@using GlitchedPolygons.DirSFTP.Models
@using GlitchedPolygons.DirSFTP.Services.Config
@using GlitchedPolygons.DirSFTP.Services.HostKey
@using GlitchedPolygons.DirSFTP.Services.Viewport
@using GlitchedPolygons.ExtensionMethods
@using System.Text.Json

<PageTitle>DirSFTP</PageTitle>

<h1>
    Welcome to DirSFTP!
</h1>

<br />

@if (sftpConfigs.NotNullNotEmpty())
{
    <div class="mobile-only" 
         style="width: 100%">

        @foreach (SftpConfig sftpConfig in sftpConfigs)
        {
            <div class="btn-group mt-4"
                 style="width: 100%"
                 role="group">

                <button type="button"
                        style="word-wrap: anywhere; text-align: left;"
                        class="btn btn-outline-secondary"
                        @onclick="() => OnClickConnect(sftpConfig)">
                    @sftpConfig.Username@@@sftpConfig.Host:@sftpConfig.Port/@sftpConfig.DefaultRemoteDirectory.TrimStart('/').TrimStart('\\')
                </button>

                <div class="btn-group" 
                     role="group">

                    <button id="btnGroupDrop1" 
                            type="button"
                            class="btn btn-outline-secondary dropdown-toggle"
                            data-bs-toggle="dropdown" 
                            aria-haspopup="true" 
                            aria-expanded="false">
                    </button>

                    <div class="dropdown-menu" aria-labelledby="btnGroupDrop1" style="">

                        <a class="dropdown-item"
                           href="javascript:void(0)"
                           @onclick="() => OnClickConnect(sftpConfig)">
                            Connect
                        </a>

                        <a class="dropdown-item" 
                           href="javascript:void(0)"
                           @onclick="() => OnClickEdit(sftpConfig)">
                            Edit
                        </a>

                        <a class="dropdown-item"
                           href="javascript:void(0)"
                           style="color: red;"
                           @onclick="() => OnClickRemove(sftpConfig)">
                            Remove
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <table class="table @(sftpConfigs.Count > 2 ? "table-striped" : "") desktop-only">
        <thead>
        <tr>
            <th>
                Connection
            </th>
            <th>
                Actions
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (SftpConfig sftpConfig in sftpConfigs)
        {
            <tr>
                <td style="word-wrap: anywhere">
                    @sftpConfig.Username@@@sftpConfig.Host:@sftpConfig.Port/@sftpConfig.DefaultRemoteDirectory.TrimStart('/').TrimStart('\\')
                </td>
                <td>
                    <a href="javascript:void(0)"
                       style="margin-right: 16px"
                       class="underline-on-hover"
                       @onclick="() => OnClickConnect(sftpConfig)">
                        Connect
                    </a>

                    <a href="javascript:void(0)"
                       style="margin-right: 16px"
                       class="underline-on-hover"
                       @onclick="() => OnClickEdit(sftpConfig)">
                        Edit
                    </a>

                    <a href="javascript:void(0)"
                       style="color: red;"
                       class="underline-on-hover"
                       @onclick="() => OnClickRemove(sftpConfig)">
                        Remove
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<br />

<button @onclick="OnClickAddNewConnection"
        class="btn btn-primary mt-1">
    Add new connection
</button>

@code
{
    private IList<SftpConfig> sftpConfigs = null;

    protected override async Task OnInitializedAsync()
    {
        await RefreshConfigList();
    }

    private async Task RefreshConfigList()
    {
        sftpConfigs = (await ConfigStorage.GetAll()).ToList();
    }

    private async Task OnClickConnect(SftpConfig config)
    {
        bool trustedHostKey = await FingerprintService.CheckFingerprint(config.Host, config.Port);

        if (trustedHostKey)
        {
            await SecureStorage.SetAsync(Constants.PreferenceIds.LAST_SFTP_CONFIG_ID, config.Id);
            await SecureStorage.SetAsync(Constants.PreferenceIds.LAST_DIRECTORY, config.DefaultRemoteDirectory.NullOrEmpty() ? "/" : config.DefaultRemoteDirectory);

            NavigationManager.NavigateTo("/browse");
        }
        else
        {
            await Application.Current!.MainPage!.DisplayAlert("Connection failed", $"SFTP Connection to {config.Username}@{config.Host}:{config.Port} either failed or was prevented due to untrusted/mismatching host key fingerprints.", "OK");
        }
    }

    private async Task OnClickEdit(SftpConfig config)
    {
        await using MemoryStream utf8JsonStream = new(512);

        await JsonSerializer.SerializeAsync(utf8JsonStream, config);

        string jsonBase64 = utf8JsonStream.ToArray().ToBase64String();

        NavigationManager.NavigateTo($"/connection-editor/{jsonBase64}");
    }

    private async Task OnClickRemove(SftpConfig config)
    {
        if (Application.Current?.MainPage is null)
        {
            return;
        }

        bool confirmed = await Application.Current.MainPage.DisplayAlert("Are you sure?", $"Do you really want to delete the saved connection details for {config.Username}@{config.Host}:{config.Port} ?", "Yes, remove", "No, keep");

        if (!confirmed)
        {
            return;
        }

        bool success = await ConfigStorage.Remove(config.Id);

        if (!success)
        {
            await Application.Current.MainPage.DisplayAlert("Error", $"Failed to delete the saved connection details for {config.Username}@{config.Host}:{config.Port}", "OK :/");
            return;
        }

        await RefreshConfigList();
    }

    private void OnClickAddNewConnection()
    {
        NavigationManager.NavigateTo("/connection-editor");
    }
}